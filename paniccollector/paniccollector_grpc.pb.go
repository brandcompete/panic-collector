// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.3
// source: paniccollector.proto

package paniccollector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PanicCollector_CollectPanic_FullMethodName = "/paniccollector.PanicCollector/CollectPanic"
	PanicCollector_GetPublicKey_FullMethodName = "/paniccollector.PanicCollector/GetPublicKey"
)

// PanicCollectorClient is the client API for PanicCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanicCollectorClient interface {
	CollectPanic(ctx context.Context, in *PanicRequest, opts ...grpc.CallOption) (*PanicResponse, error)
	GetPublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
}

type panicCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewPanicCollectorClient(cc grpc.ClientConnInterface) PanicCollectorClient {
	return &panicCollectorClient{cc}
}

func (c *panicCollectorClient) CollectPanic(ctx context.Context, in *PanicRequest, opts ...grpc.CallOption) (*PanicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PanicResponse)
	err := c.cc.Invoke(ctx, PanicCollector_CollectPanic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panicCollectorClient) GetPublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, PanicCollector_GetPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanicCollectorServer is the server API for PanicCollector service.
// All implementations must embed UnimplementedPanicCollectorServer
// for forward compatibility.
type PanicCollectorServer interface {
	CollectPanic(context.Context, *PanicRequest) (*PanicResponse, error)
	GetPublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
	mustEmbedUnimplementedPanicCollectorServer()
}

// UnimplementedPanicCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPanicCollectorServer struct{}

func (UnimplementedPanicCollectorServer) CollectPanic(context.Context, *PanicRequest) (*PanicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPanic not implemented")
}
func (UnimplementedPanicCollectorServer) GetPublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedPanicCollectorServer) mustEmbedUnimplementedPanicCollectorServer() {}
func (UnimplementedPanicCollectorServer) testEmbeddedByValue()                        {}

// UnsafePanicCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanicCollectorServer will
// result in compilation errors.
type UnsafePanicCollectorServer interface {
	mustEmbedUnimplementedPanicCollectorServer()
}

func RegisterPanicCollectorServer(s grpc.ServiceRegistrar, srv PanicCollectorServer) {
	// If the following call pancis, it indicates UnimplementedPanicCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PanicCollector_ServiceDesc, srv)
}

func _PanicCollector_CollectPanic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PanicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanicCollectorServer).CollectPanic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PanicCollector_CollectPanic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanicCollectorServer).CollectPanic(ctx, req.(*PanicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanicCollector_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanicCollectorServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PanicCollector_GetPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanicCollectorServer).GetPublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PanicCollector_ServiceDesc is the grpc.ServiceDesc for PanicCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PanicCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paniccollector.PanicCollector",
	HandlerType: (*PanicCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectPanic",
			Handler:    _PanicCollector_CollectPanic_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _PanicCollector_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paniccollector.proto",
}
